/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package BaseDatos;

import java.awt.Container;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.MenuEvent;
import javax.swing.event.MenuListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author zombozo
 */
public class pantallaVentas extends javax.swing.JFrame{
DefaultTableModel modelo;
ArrayList<String> contenedor    =new ArrayList<>();
ArrayList<String> precio        =new ArrayList<>();
ArrayList<String> existencia    =new ArrayList<>();
ArrayList<String> codigo        =new ArrayList<>();
ArrayList<String> nombres        =new ArrayList<>();
ArrayList<String> fabricante    =new ArrayList<>();

ArrayList<String> precioCompra  =new ArrayList<>();
int valor;
int id;
double precios,PrecioCompra,PrecioVenta;
int existencias;

    /**
     * Creates new form pantallaVentas
     */
    public pantallaVentas() {
        initComponents();
        
        tbxOpciones.addItem("Nombre");
        tbxOpciones.addItem("contenedor");
        
        agregarItems();
        cargarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        busqueda = new javax.swing.JTextField();
        tbxOpciones = new javax.swing.JComboBox();
        buscar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        VentaCantidadVendida = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        VentaNombre = new javax.swing.JTextField();
        calcular = new javax.swing.JButton();
        VentaTotal = new javax.swing.JLabel();
        vender = new javax.swing.JButton();
        menu = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        operaciones = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("registro de ventas");
        setResizable(false);

        busqueda.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        tbxOpciones.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tbxOpciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbxOpcionesActionPerformed(evt);
            }
        });

        buscar.setText("buscar");
        buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarActionPerformed(evt);
            }
        });

        tabla.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Nombre", "contenedor", "fabricante", "Precio", "Existencia"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabla);
        if (tabla.getColumnModel().getColumnCount() > 0) {
            tabla.getColumnModel().getColumn(0).setPreferredWidth(50);
            tabla.getColumnModel().getColumn(4).setPreferredWidth(50);
            tabla.getColumnModel().getColumn(5).setPreferredWidth(50);
        }

        jSeparator1.setForeground(new java.awt.Color(0, 0, 0));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Cantidad vendida");

        VentaCantidadVendida.setEditable(false);
        VentaCantidadVendida.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        VentaCantidadVendida.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                VentaCantidadVendidaFocusLost(evt);
            }
        });
        VentaCantidadVendida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VentaCantidadVendidaActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Nombre del producto");

        VentaNombre.setEditable(false);
        VentaNombre.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        calcular.setText("Calcular Total");
        calcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcularActionPerformed(evt);
            }
        });

        VentaTotal.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        VentaTotal.setText("Total");

        vender.setText("Vender");
        vender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                venderActionPerformed(evt);
            }
        });

        menu.add(jMenu1);

        operaciones.setText("Operaciones");
        menu.add(operaciones);

        setJMenuBar(menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tbxOpciones, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(busqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buscar)
                .addGap(27, 27, 27)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 358, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(VentaCantidadVendida))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(calcular)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(VentaTotal))
                    .addComponent(VentaNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(vender))
                .addGap(119, 119, 119))
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(busqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tbxOpciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buscar)))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(VentaNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(VentaCantidadVendida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(calcular)
                            .addComponent(VentaTotal))
                        .addGap(18, 18, 18)
                        .addComponent(vender)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 92, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarActionPerformed
       contenedor.clear();
       precio.clear();
       existencia.clear();
       codigo.clear();
       nombres.clear();
       fabricante.clear();
       VentaCantidadVendida.setEditable(false);
       if(modelo.getRowCount()>0)
       {
                    for(int a=0;a<modelo.getRowCount();a++)
                    {
                        modelo.removeRow(a);
                        a-=1;
                    }
       }
        
        boolean estado= busqueda.getText().isEmpty();
       if(estado==false)
       { // si esta falso el estado significa que el campo de busqueda no esta vacio
           if(tbxOpciones.getSelectedIndex()==0)
                {
                    String codigo=busqueda.getText().toString(); 
                    buscar(busqueda.getText().toString());
                }else if(tbxOpciones.getSelectedIndex()==1)
                {
                    String nombre=busqueda.getText().toString();
                    //buscara un nombre

                }
       }
        
        
    }//GEN-LAST:event_buscarActionPerformed
    /* ================================================================================*/
    private void tbxOpcionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbxOpcionesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tbxOpcionesActionPerformed
    /* ================================================================================*/
    private void tablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaMouseClicked
      
      this.VentaNombre.setText(nombres.get(tabla.getSelectedRow()));
       String tempo=precio.get(tabla.getSelectedRow());
       String tempoID=codigo.get(tabla.getSelectedRow());
       try{
       existencias=Integer.parseInt(existencia.get(tabla.getSelectedRow()));
       
       id=Integer.parseInt(tempoID);
       precios=Double.parseDouble(tempo);
       
       }catch(Exception e){
           VentaCantidadVendida.setEditable(false);
       }
      
       PrecioVenta=Double.parseDouble(this.precio.get(tabla.getSelectedRow()));
       PrecioCompra=Double.parseDouble(this.precioCompra.get(tabla.getSelectedRow()));
       
       VentaCantidadVendida.setEditable(true);
       
       if(existencias<1){
           VentaCantidadVendida.setEditable(false);
           
       }
    }//GEN-LAST:event_tablaMouseClicked
    /* ================================================================================*/
    private void VentaCantidadVendidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VentaCantidadVendidaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_VentaCantidadVendidaActionPerformed
    /* ================================================================================*/
    private void calcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcularActionPerformed
       String temporal=VentaCantidadVendida.getText().toString();
       int total=Integer.parseInt(temporal);
       double suma=total*precios;
       VentaTotal.setText(""+suma);
    }//GEN-LAST:event_calcularActionPerformed
    /* ================================================================================*/
    private void venderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_venderActionPerformed
        boolean estadoCampos=this.VentaCantidadVendida.getText().isEmpty();
        estadoCampos |=this.VentaNombre.getText().isEmpty();
        int totalAVender=0;
        if (estadoCampos==false)
         { // COMPRUEBA QUE LOS CAMPOS DE TEXTO CONTENGAN ALGO.
            totalAVender=Integer.parseInt(VentaCantidadVendida.getText().toString());
                        if(existencias>=totalAVender)
                        {//si las existencias son mayores a cero procesara la compra
                                int nuevoTotal=existencias-totalAVender;   
                                compras compra=new compras(id);
                                compras comprasActualizarPorVenta=new compras();
                                guardarVENTAS ventas=new guardarVENTAS();
                                ventas.CrearDB();
                                ventas.setIdProducto(""+id);
                                ventas.setPrecioCompra(""+PrecioCompra);
                                ventas.setPrecioVenta(""+PrecioVenta);
                                ventas.setCantidadVendida(this.VentaCantidadVendida.getText().toString());
                                ventas.setFechaCompra(variables_globales.fecha());
                                boolean estado=ventas.guardar();
                                            if( estado==false)
                                            {// COMPRUEBA EL ESTADO SI ES FALSO TODOS LOS CAMPOS CONTENIAN ALGUNA CADENA
                                                        JOptionPane.showMessageDialog(VentaNombre, "Venta creada Correctamente!!");
                                                        comprasActualizarPorVenta.actualizarCompra(id, nuevoTotal);
                                                        this.VentaNombre.setText("");
                                                        this.VentaCantidadVendida.setText("");
                                                        this.VentaTotal.setText("");
                                            }
                                           else {
                                                JOptionPane.showMessageDialog(VentaNombre, guardarVENTAS.mensaje);
                                            }
                        }
                        else{
                            JOptionPane.showMessageDialog(VentaNombre, "no as seleccionado un producto");
                        }
        }else{
            JOptionPane.showMessageDialog(VentaNombre, "segun el registro no existe mas producto de este tipo, verifique si este producto ya fue registrado o esta pendiente");
        }
    }//GEN-LAST:event_venderActionPerformed
    /* ================================================================================*/
    private void VentaCantidadVendidaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_VentaCantidadVendidaFocusLost
       String texto=VentaCantidadVendida.getText().toString();
       boolean estado=false;
       String valores="0123456789";
       try{
            for(int a=1;a<=texto.length();a++)
                        {
                            
                                String ab=""+texto.charAt(a);
                                for(int b=0;b<valores.length();b++)
                                {
                                    String ac=""+valores.charAt(b);
                                    if(ab.equals(ac)){
                                         estado=true;
                                    }else{
                                        estado=false;
                                    }

                                }
                            
                        }
       
                    if(estado==false)
                    {
                        JOptionPane.showMessageDialog(rootPane, "contiene caracteres no validos");
                        VentaCantidadVendida.setText("");
                        VentaCantidadVendida.requestFocus();
                    }
       }catch(Exception e){
               
               }
  /* ================================================================================*/
    }//GEN-LAST:event_VentaCantidadVendidaFocusLost
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(pantallaVentas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(pantallaVentas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(pantallaVentas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(pantallaVentas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new pantallaVentas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField VentaCantidadVendida;
    private javax.swing.JTextField VentaNombre;
    private javax.swing.JLabel VentaTotal;
    private javax.swing.JButton buscar;
    private javax.swing.JTextField busqueda;
    private javax.swing.JButton calcular;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JMenuBar menu;
    private javax.swing.JMenu operaciones;
    private javax.swing.JTable tabla;
    private javax.swing.JComboBox tbxOpciones;
    private javax.swing.JButton vender;
    // End of variables declaration//GEN-END:variables
private void buscar(String nombre){
        String tempo="";
    
    try{
           Statement conexion=ConectarMysql.obtenerConexion().createStatement(ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);
           String sql="select * from "+productos.SQL_NombreTabla+" where "+productos.SQL_nombreProducto+" LIKE '"+nombre+"%'";
           ResultSet consulta=conexion.executeQuery(sql);
                    while(consulta.next())
                    {
                                tempo=consulta.getString(2);
                                if(tempo!=null)
                                {
                                    int codigos=consulta.getInt(1);
                                    codigo.add(consulta.getString(1));
                                    nombres.add(consulta.getString(2));
                                    contenedor.add(getContenedor(consulta.getInt(4)));
                                    precio.add(getPrecio(codigos));
                                    existencia.add(getExistencia(codigos));
                                    fabricante.add(consulta.getString(3));


                                  tempo="";
                                }

                    }
                    for(int a=0;a<codigo.size();a++){
                                modelo.addRow(new Object[]{codigo.get(a),nombres.get(a),contenedor.get(a),fabricante.get(a),precio.get(a),existencia.get(a)});

                            }
                    conexion.close();
    }catch(Exception e){
        JOptionPane.showMessageDialog(rootPane, e.getMessage());
    }
    
    }
    /* ================================================================================*/
    private void agregarItems() {
        try{
                        ArrayList<JMenuItem> items;
                        ItemsMenu obtenerItems=new ItemsMenu();
                        items=obtenerItems.items();
                    for(int a=0;a<items.size();a++)
                    {

                        int b=a;
                        operaciones.add(items.get(a));
                        items.get(a).addActionListener(new ActionListener(){
                            boolean estados;
                            @Override
                            public void actionPerformed(ActionEvent e) {
                              // JOptionPane.showMessageDialog(rootPane, e.getActionCommand());
                             estados=obtenerItems.metodos(b);
                             if(estados==true){
                                cerrar();
                             }
                            }
                        });
                   }
        }catch(Exception e){
            
        }
         
      
        
    }
    /* ================================================================================*/
   void cerrar(){
        this.dispose();
    }
    /* ================================================================================*/
    private void cargarTabla() {
        //JTable tabla=new JTable();
        modelo=(DefaultTableModel)tabla.getModel();
    }

    private String getContenedor(int id) throws SQLException {
      Statement conexion=ConectarMysql.obtenerConexion().createStatement(ResultSet.CONCUR_READ_ONLY,ResultSet.TYPE_FORWARD_ONLY);
       String sql="select * from contenedores";
      
      ResultSet consulta=conexion.executeQuery(sql);
      while(consulta.next()){
        if(consulta.getInt(1)==id){
            return consulta.getString(2);
        }
    }
      conexion.close();
      return "";
    }
    /* ================================================================================*/
    private String getPrecio(int id) throws SQLException {
        Statement conexion=ConectarMysql.obtenerConexion().createStatement(ResultSet.CONCUR_READ_ONLY,ResultSet.TYPE_FORWARD_ONLY);
        String sql="select * from compras";
        ResultSet resultado=conexion.executeQuery(sql);
        while(resultado.next()){
            if(resultado.getInt(2)==id){
                this.precioCompra.add(resultado.getString(5));
                return resultado.getString(6);
            }
        }
        conexion.close();
        return null;
    }
    /* ================================================================================*/
    private String getExistencia(int id) throws SQLException {
        Statement conexion=ConectarMysql.obtenerConexion().createStatement(ResultSet.CONCUR_READ_ONLY,ResultSet.TYPE_FORWARD_ONLY);
        String sql=" select * from compras";
        ResultSet resultado=conexion.executeQuery(sql);
        while(resultado.next()){
            if(resultado.getInt(2)==id){
               
                return resultado.getString(4);
            }
        }
        return null;
    }

    
}
